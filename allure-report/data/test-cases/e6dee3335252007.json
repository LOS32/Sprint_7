{"uid":"e6dee3335252007","name":"Тест на проверку получения списка заказов","fullName":"tests.orders.test_get_orders.TestGetOrders#test_get_orders","historyId":"7230c6c65488a399f2340e20dce5820a","time":{"start":1734242952161,"stop":1734243013816,"duration":61655},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n\nvenv/lib/python3.12/site-packages/requests/models.py:963: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10245ba10>, s = 'Service unavailable', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.orders.test_get_orders.TestGetOrders object at 0x103639940>, order = {'order_methods': <methods.order_methods.OrderMethods object at 0x10363b680>, 'order_track': 627124}\n\n    @allure.title('Тест на проверку получения списка заказов')\n    def test_get_orders(self, order):\n        order[\"order_methods\"].create_order(order[\"order_track\"])\n        response = order[\"order_methods\"].get_orders()\n>       response_json = response.json()\n\ntests/orders/test_get_orders.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nvenv/lib/python3.12/site-packages/requests/models.py:971: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"order","time":{"start":1734242950916,"stop":1734242952160,"duration":1244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"order::0","time":{"start":1734243013900,"stop":1734243013901,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Список заказов"},{"name":"parentSuite","value":"tests.orders"},{"name":"suite","value":"test_get_orders"},{"name":"subSuite","value":"TestGetOrders"},{"name":"host","value":"MBP-Dmitrij.lan"},{"name":"thread","value":"3209-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.orders.test_get_orders"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e6dee3335252007.json","parameterValues":[]}